import asyncio
import logging
import os  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç os –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–∞–º–∏
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from keyboards import get_main_menu
from utils.parser import get_latest_articles, search_articles, fetch_article_content
from dotenv import load_dotenv
import json

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏ (–æ—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–ª—É—à–∫–∏)
try:
    from news import fetch_news
except ImportError:
    async def fetch_news(lang="ru"):
        return [{"title": "–ù–æ–≤–æ—Å—Ç—å 1", "date": "2025-05-15", "url": "https://example.com"}]

try:
    from search import search as custom_search
except ImportError:
    async def custom_search(query, lang="ru"):
        return [{"title": f"–†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è {query}", "date": "2025-05-15", "url": "https://example.com"}]

try:
    from settings import SUPPORTED_LANGUAGES, DEFAULT_LANGUAGE, MAX_ARTICLES
except ImportError:
    SUPPORTED_LANGUAGES = ["ru", "uz"]
    DEFAULT_LANGUAGE = "ru"
    MAX_ARTICLES = 10

try:
    from user import UserManager
except ImportError:
    class UserManager:
        def __init__(self):
            self.users = {}
            self.load_users()

        def load_users(self):
            if os.path.exists("users.json"):
                with open("users.json", "r") as f:
                    self.users = json.load(f)

        def save_users(self):
            with open("users.json", "w") as f:
                json.dump(self.users, f, indent=4)

        def add_user(self, user_id, name, phone):
            self.users[user_id] = {"name": name, "phone": phone}
            self.save_users()

        def get_user(self, user_id):
            return self.users.get(user_id)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise ValueError("BOT_TOKEN not found in .env file")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_manager = UserManager()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è FSM
class AuthStates(StatesGroup):
    WAITING_FOR_NAME = State()
    WAITING_FOR_PHONE = State()

class SearchStates(StatesGroup):
    WAITING_FOR_QUERY = State()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π
latest_articles = []

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    user = user_manager.get_user(user_id)
    if user:
        await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user['name']}! –í—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_menu())
    else:
        await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
        await state.set_state(AuthStates.WAITING_FOR_NAME)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏
@dp.message(AuthStates.WAITING_FOR_NAME)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–°–ø–∞—Å–∏–±–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(AuthStates.WAITING_FOR_PHONE)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(AuthStates.WAITING_FOR_PHONE)
async def process_phone(message: types.Message, state: FSMContext):
    user_id = str(message.from_user.id)
    data = await state.get_data()
    name = data.get("name")
    phone = message.text
    user_manager.add_user(user_id, name, phone)
    await message.answer(f"–°–ø–∞—Å–∏–±–æ, {name}! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=get_main_menu())
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ callback-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç –∫–Ω–æ–ø–æ–∫
@dp.callback_query()
async def process_callback(callback: types.CallbackQuery, state: FSMContext):
    user_id = str(callback.from_user.id)
    user = user_manager.get_user(user_id)
    if not user:
        await callback.message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")
        await callback.answer()
        return

    global latest_articles

    if callback.data == "kadrovik_latest":
        articles = await get_latest_articles(DEFAULT_LANGUAGE)
        if articles:
            latest_articles = articles[:MAX_ARTICLES]
            response = "üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ —Å Kadrovik.uz:\n\n"
            for i, article in enumerate(latest_articles, 1):
                response += f"{i}. {article['emoji']} *{article['title']}*\nüìÖ {article['date']}\n\n"
            
            buttons = [
                [types.InlineKeyboardButton(text=f"{i} –°—Ç–∞—Ç—å—è", callback_data=f"article_{i-1}")]
                for i in range(1, len(latest_articles) + 1)
            ]
            keyboard = types.InlineKeyboardMarkup(inline_keyboard=buttons)
            await callback.message.answer(response, parse_mode="Markdown", reply_markup=keyboard)
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    elif callback.data.startswith("article_"):
        article_index = int(callback.data.split("_")[1])
        if 0 <= article_index < len(latest_articles):
            article = latest_articles[article_index]
            content = await fetch_article_content(article['url'])
            if content:
                # –°–æ–∑–¥–∞—ë–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å —Å–æ–¥–µ—Ä–∂–∏–º—ã–º —Å—Ç–∞—Ç—å–∏
                filename = f"article_{article_index}.txt"
                with open(filename, "w", encoding="utf-8") as f:
                    f.write(content)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                with open(filename, "rb") as f:
                    await callback.message.answer_document(
                        document=f,
                        caption=f"üì∞ *{article['title']}*\nüìÖ {article['date']}",
                        parse_mode="Markdown"
                    )
                
                # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                os.remove(filename)
            else:
                logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏: {article['url']}")
                await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å—Ç–∞—Ç—å–∏.")
        else:
            await callback.message.answer("–°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    elif callback.data == "kadrovik_search":
        await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç–∞—Ç–µ–π –Ω–∞ Kadrovik.uz:")
        await state.set_state(SearchStates.WAITING_FOR_QUERY)
    elif callback.data == "help":
        await callback.message.answer("‚ÑπÔ∏è *–ü–æ–º–æ—â—å*\n\n- –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏\n- –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ")
    elif callback.data == "about":
        await callback.message.answer("ü§ñ *–û –±–æ—Ç–µ*\n\nKadrovik Bot –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å —Å–∞–π—Ç–∞ Kadrovik.uz. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–ª–∏ –∏—Å–∫–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ –∫–ª—é—á–µ–≤—ã–º —Å–ª–æ–≤–∞–º.")
    elif callback.data == "kadrovik_news":
        news = await fetch_news(DEFAULT_LANGUAGE)
        if news:
            response = "üîî –ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏:\n\n"
            for item in news[:MAX_ARTICLES]:
                response += f"üì¢ *{item['title']}*\nüìÖ {item['date']}\nüîó {item['url']}\n\n"
            await callback.message.answer(response, parse_mode="Markdown")
        else:
            await callback.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞
@dp.message(SearchStates.WAITING_FOR_QUERY)
async def process_search_query(message: types.Message, state: FSMContext):
    query = message.text
    articles = await search_articles(query, DEFAULT_LANGUAGE)
    if articles:
        response = f"üì∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
        for article in articles[:MAX_ARTICLES]:
            response += f"{article['emoji']} *{article['title']}*\nüìÖ {article['date']}\nüîó {article['url']}\n\n"
        await message.answer(response, parse_mode="Markdown")
    else:
        custom_results = await custom_search(query, DEFAULT_LANGUAGE)
        if custom_results:
            response = f"üì∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥) –ø–æ –∑–∞–ø—Ä–æ—Å—É '{query}':\n\n"
            for result in custom_results[:MAX_ARTICLES]:
                response += f"üì¢ *{result['title']}*\nüìÖ {result['date']}\nüîó {result['url']}\n\n"
            await message.answer(response, parse_mode="Markdown")
        else:
            await message.answer(f"–ü–æ –∑–∞–ø—Ä–æ—Å—É '{query}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    await state.clear()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
@dp.message()
async def check_authorization(message: types.Message):
    user_id = str(message.from_user.id)
    if not user_manager.get_user(user_id) and message.text != "/start":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é /start.")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())